# Copyright (c) 2014 Stefan.Eilemann@epfl.ch

# Configures the build for a simple library:
#   common_library(<Name>)
#
# Uses:
# * NAME_SOURCES for all compilation units
# * NAME_HEADERS for all internal header files
# * NAME_PUBLIC_HEADERS for public, installed header files
# * NAME_LINK_LIBRARIES for dependencies of name
# * VERSION for the API version
# * VERSION_ABI for the ABI version
#
# Builds libName and installs it. Installs the public headers to include/name.
# Generates a PROJECT_INCLUDE_NAME/PROJECT_INCLUDE_NAME.h including all public
# headers.

include(InstallFiles)
include(UpdateFile)

function(COMMON_LIBRARY Name)
  string(TOUPPER ${Name} NAME)
  string(TOLOWER ${Name} name)
  set(SOURCES ${${NAME}_SOURCES})
  set(HEADERS ${${NAME}_HEADERS})
  set(PUBLIC_HEADERS ${${NAME}_PUBLIC_HEADERS})
  set(LINK_LIBRARIES ${${NAME}_LINK_LIBRARIES})

  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${name}.in.h
    "// generated by CommonLibrary.cmake, do not edit\n"
    "#ifndef ${NAME}_H\n"
    "#define ${NAME}_H\n")
  foreach(PUBLIC_HEADER ${PUBLIC_HEADERS})
    if(IS_ABSOLUTE ${PUBLIC_HEADER})
      get_filename_component(PUBLIC_HEADER ${PUBLIC_HEADER} NAME)
    endif()
    if(NOT PUBLIC_HEADER MATCHES "defines.+\\.h" AND
        PUBLIC_HEADER MATCHES ".*\\.h$" )

      file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${name}.in.h
        "#include <${name}/${PUBLIC_HEADER}>\n")
    endif()
  endforeach()
  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${name}.in.h "#endif\n")
  set(PROJECT_INCLUDE_HEADER ${CMAKE_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/${PROJECT_INCLUDE_NAME}.h)

  update_file(${CMAKE_CURRENT_BINARY_DIR}/${name}.in.h
    ${PROJECT_INCLUDE_HEADER})
  list(APPEND PUBLIC_HEADERS ${PROJECT_INCLUDE_HEADER})

  if(SOURCES)
    list(SORT SOURCES)
  endif()
  if(HEADERS)
    list(SORT HEADERS)
  endif()
  list(SORT PUBLIC_HEADERS)

  source_group(${name} FILES ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS})
  add_library(${Name} SHARED ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS})
  target_link_libraries(${Name} ${LINK_LIBRARIES})
  set_target_properties(${Name}
    PROPERTIES VERSION ${VERSION} SOVERSION ${VERSION_ABI}
    PUBLIC_HEADER "${PUBLIC_HEADERS}")

  install(TARGETS ${Name}
    ARCHIVE DESTINATION lib COMPONENT dev
    RUNTIME DESTINATION bin COMPONENT lib
    LIBRARY DESTINATION lib COMPONENT lib)

  # install(TARGETS ... PUBLIC_HEADER ...) flattens directories
  install_files(include/${name} FILES ${PUBLIC_HEADERS} COMPONENT dev)
endfunction()
